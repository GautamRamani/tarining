Authentication: 
                When a user successfully logs in using their credentials, an ID token is returned. According to the OpenID Connect (OIDC) specs, an ID token is always a JWT.

Authorization: 
                Once a user is successfully logged in, an application may request to access routes, services, or resources (e.g., APIs) on behalf of that user. To do so, in every request, it must pass an Access Token, which may be in the form of a JWT. Single Sign-on (SSO) widely uses JWT because of the small overhead of the format, and its ability to easily be used across different domains.

Information Exchange: 
                    JWTs are a good way of securely transmitting information between parties because they can be signed, which means you can be sure that the senders are who they say they are. Additionally, the structure of a JWT allows you to verify that the content hasn't been tampered with. 

                    Auth Refer:-
                                https://jasonwatmore.com/post/2018/08/06/nodejs-jwt-authentication-tutorial-with-example-api

                                Make an E-Commerce Website (SaturdayBazaar.com) APIs

    pagination:-
                var mongoosePaginate = require('mongoose-paginate');
                Product.plugin(mongoosePaginate);

                var {page,perpage}=req.query;
        var query={}
        var options = {
            page:parseInt(page,10)||1,
            limit:parseInt(perpage,10)||10
        }
        const getproduct = await Product.paginate(query,options)

Task:-

Common Routes:

POST /login -> login with email and password

POST /register -> register user with basic user information



Admin APIs:



USER APIs:

GET api/admin/users -> List of registered Users of SaturdayBazaar.com

POST api/admin/users -> Create User directly through Admin Panel

GET api/admin/user/:id -> Get User Details By Id

UPDATE  api/admin/user/:id -> Update User Details By Id

DELETE api/admin/user/:id -> Delete User By Id



Product APIs:

GET api/admin/product -> Get List of Products

POST /api/admin/product -> Add Product

GET /api/admin/product/:id -> Get Product Details By Id

PUT /api/admin/product/:id -> Update Product Details By Id

DELETE /api/admin/product/:id -> Delete Product By Id



Client APIs: 



GET /api/user/product -> Get All Products

-- Add Paginatin and Search Functionality

GET /api/user/profile -> Get Profile

PUT /api/user/profile -> Update Profile