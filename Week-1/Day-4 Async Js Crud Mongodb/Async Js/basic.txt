Synchronous JavaScript: 
                        As the name suggests synchronous means to be in a sequence, i.e. every statement of the code gets executed one by one. So, basically a statement has to wait for the earlier statement to get executed.

Asynchronous JavaScript: 
                        Asynchronous code allows the program to be executed immediately where the synchronous code will block further execution of the remaining code until it finishes the current one. This may not look like a big problem but when you see it in a bigger picture you realize that it may lead to delaying the User Interface.

Callback hell:-
                        'Because we have to call callbacks inside callbacks, we get a deeply nested dooperation() function, which is much harder to read and dibug. This is something called 'callback function' or 'Pyramid of doom'

Promise:-
                        The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.

                    rough:-
                        promise object represent the status of completion or failure of an asyncronous operation and its resulting value.

                        pending: initial state, neither fulfilled nor rejected.
                        fulfilled: meaning that the operation was completed successfully.
                        rejected: meaning that the operation failed.

The Promise.race():-
                        Promise.race() method returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise.