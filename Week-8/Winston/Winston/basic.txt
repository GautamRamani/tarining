Two phase commit:-
    Two phase commit coordinates the saving of data (commit) and reversal of changes if need be. A two phase commit MongoDB operation makes sure that there are no inconsistencies due to failures in database operations while performing multi-document transactions.

    How Does Two Phase Commit MongoDB Work?
There are two phases in the two phase commit operation. The first phase involves sending messages to each server:

Phase 1: The coordinator sends a message to each of the servers for them to put in their independent log records. If the operation on any server is unsuccessful, it returns a failure message, and if otherwise, it returns a success message.
The next step in the two phase commit operation is to commit. 

Phase 2: Phase 2 is the committing phase. In this phase, the coordinator signals to every server connected with commit instructions. Meanwhile, if all the servers do not respond with a success message, phase 1 has to be reinitiated.

ObjectID:-
    Total:24 char->every two char has 12 bytes
    12 bytes-->
        - 4 bytes: timestamp
        - 3 bytes: machine identifier
        - 2 bytes: process identifier
        - 3 byes: counter 

1 byte=8 bits
2^8 =256
2^24=16M

Driver ->MongoDB

MongoDB(use of $ sign)

    In expression, the dollar sign $ evaluates to a field path; i.e. provides access to the field. For example, the $eq expression $eq: [ "$price", "$1" ] performs an equality check between the value in the field named price and the value in the field named 1 in the document.

    Mongoose: Modelling Relationships between 
Connected Data
So, in this section, you learned that: 
- To model relationships between connected data, we can either reference a 
document or embed it in another document. 
- When referencing a document, there is really no relationship between these two 
documents. So, it is possible to reference a non-existing document. 
- Referencing documents (normalization) is a good approach when you want to 
enforce data consistency. Because there will be a single instance of an object in 
the database. But this approach has a negative impact on the performance of 
your queries because in MongoDB we cannot JOIN documents as we do in 
relational databases. So, to get a complete representation of a document with its 
related documents, we need to send multiple queries to the database.
- Embedding documents (denormalization) solves this issue. We can read a 
complete representation of a document with a single query. All the necessary 
data is embedded in one document and its children. But this also means we’ll 
have multiple copies of data in different places. While storage is not an issue 
these days, having multiple copies means changes made to the original 
document may not propagate to all copies. If the database server dies during an 
update, some documents will be inconsistent. For every business, for every 
problem, you need to ask this question: “can we tolerate data being inconsistent 
for a short period of time?” If not, you’ll have to use references. But again, this 
means that your queries will be slower. 
// Referencing a document 
const courseSchema = new mongoose.Schema({
 author: {
 type: mongoose.Schema.Types.ObjectId,
 ref: ‘Author’ 
 } 
})
// Referencing a document 
const courseSchema = new mongoose.Schema({
 author: {
 type: new mongoose.Schema({
 name: String, 
 bio: String 
 })
 } 
})
- Embedded documents don’t have a save method. They can only be saved in the 
context of their parent. 
// Updating an embedded document 
const course = await Course.findById(courseId);
course.author.name = ‘New Name’; 
course.save();
- We don’t have transactions in MongoDB. To implement transactions, we use a 
pattern called “Two Phase Commit”. If you don’t want to manually implement this 
pattern, use the Fawn NPM package: 
// Implementing transactions using Fawn 
try { 
 await new Fawn.Task() 
 .save(‘rentals’, newRental)
 .update(‘movies’, { _id: movie._id }, { $inc: numberInStock: -1 }})
 .run(); 
} 
catch (ex) { 
 // At this point, all operations are automatically rolled back
} 
- ObjectIDs are generated by MongoDB driver and are used to uniquely identify a 
document. They consist of 12 bytes: 
- 4 bytes: timestamp
- 3 bytes: machine identifier
- 2 bytes: process identifier
- 3 byes: counter 
- ObjectIDs are almost unique. In theory, there is a chance for two ObjectIDs to be 
equal but the odds are very low (1/16,000,000) for most real-world applications. 
// Validating ObjectIDs
mongoose.Types.ObjectID.isValid(id); 
- To validate ObjectIDs using joi, use joi-objectid NPM package

*****************************************
authentication,authorization
Simply put, authentication is the process of verifying who someone is,
whereas authorization is the process of verifying what specific applications, files, and data a user has access to.

authentication means who are login
authorization means if user hase right to permission to perform the operation


**********************************


lodash:-update version of underscore

npm i lodash

**********************
bcrypt
npm i bcrypt

*******************************
json web token:- its a long string(driver lisence,password)

*******************************
conclusion:-
Authentication and Authorization
So, in this section, you learned that: 
- Authentication is the process of determining if the user is who he/she claims to 
be. It involves validating their email/password.
- Authorization is the process of determining if the user has permission to perform 
a given operation.
- To hash passwords, use bcrypt:
// Hashing passwords
const salt = await bcrypt.genSalt(10);
const hashed = await bcrypt.hash(‘1234’, salt);
// Validating passwords
const isValid = await bcrypt.compare(‘1234’, hashed);
- A JSON Web Token (JWT) is a JSON object encoded as a long string. We use 
them to identify users. It’s similar to a passport or driver’s license. It includes a 
few public properties about a user in its payload. These properties cannot be 
tampered because doing so requires re-generating the digital signature. 
- When the user logs in, we generate a JWT on the server and return it to the 
client. We store this token on the client and send it to the server every time we 
need to call an API endpoint that is only accessible to authenticated users.
- To generate JSON Web Tokens in an Express app use jsonwebtoken package. 
// Generating a JWT 
const jwt = require(‘jsonwebtoken’);
const token = jwt.sign({ _id: user._id}, ‘privateKey’);
- Never store private keys and other secrets in your codebase. Store them in 
environment variables. Use the config package to read application settings 
stored in environment variables. 
- When appropriate, encapsulate logic in Mongoose models: 
// Adding a method to a Mongoose model
userSchema.methods.generateAuthToken = function() { 
} 
const token = user.generateAuthToken();
- Implement authorization using a middleware function. Return a 401 error 
(unauthorized) if the client doesn’t send a valid token. Return 403 (forbidden) if 
the user provided a valid token but is not allowed to perform the given operation.
- You don’t need to implement logging out on the server. Implement it on the client 
by simply removing the JWT from the client. 
- Do not store a JWT in plain text in a database. This is similar to storing users’ 
passports or drivers license in a room. Anyone who has access to that room can 
steal these passports. Store JWTs on the client. If you have a strong reason for 
storing them on the server, make sure to encrypt them before storing them in a 
database.

//npm i express-async-errors
if we terminate the code and after request is fire so it will throw the error with status code

//winston
npm i winston

mainle gor logging...

winston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each winston logger can have multiple transports (see: Transports) configured at different levels (see: Logging levels). For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.

for  console,file,http   
   MongoDB,CouchDB,Redis,Loggly
